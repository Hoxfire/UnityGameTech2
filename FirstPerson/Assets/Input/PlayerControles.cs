//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerControles.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControles: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControles()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControles"",
    ""maps"": [
        {
            ""name"": ""GroundMove"",
            ""id"": ""5776ff16-98c3-4376-97e4-b4cf2e4c9cb1"",
            ""actions"": [
                {
                    ""name"": ""HoreMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""faa533ca-5d17-43c5-ad7d-b1f83753f7d1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dcb80094-697f-46f9-a18b-a2db61074e68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b90754d1-7da0-4d8f-8949-eca0afce8778"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""77fcbeec-9bac-4181-912b-5ac5e92656d6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DriveMode"",
                    ""type"": ""Button"",
                    ""id"": ""03e596ee-4191-4d7d-a4ca-f05b11fd0379"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""052c1768-cfb7-4c16-90ff-5d5fd57e014d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoreMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f64e9510-9657-4776-92d1-d879287151f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HoreMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d0de86f9-b188-4754-8588-f474dda8d9c7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HoreMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c97a5fc-0127-43a3-9b42-a088f86b0429"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HoreMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b2d21206-d540-4d80-8a79-3ec7d9da2ad2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HoreMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""01c493c4-692c-4bbd-a62b-1dcd12b1d006"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dda911a3-7006-4d90-83bb-e71e1f4b4b25"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e880cf8f-12f1-49e5-9235-f6fe32dbf747"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""595af3b8-e3dc-4a0f-86a5-6eae23292a9f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CarMove"",
            ""id"": ""1cc82b48-a4c9-411f-885d-8a93eb42e694"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""16bca922-239d-4ae4-8ee1-5fe913770e32"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pedal"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d7bb9984-ece1-4f52-889e-a9e64e94f553"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ebe12876-74d0-4eca-bf07-2f787d1d2e4c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""69d56e6c-ab41-4d45-b6ce-93a35d560656"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e929f637-18ae-4fb1-82e3-28cc66e7161a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c16e2af4-c639-4f3f-ab04-661786fe5ebd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""484b3faa-82ba-468e-8930-88e48c75e175"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7360d68d-1b8e-4541-baf4-d317f9d10413"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // GroundMove
        m_GroundMove = asset.FindActionMap("GroundMove", throwIfNotFound: true);
        m_GroundMove_HoreMove = m_GroundMove.FindAction("HoreMove", throwIfNotFound: true);
        m_GroundMove_Jump = m_GroundMove.FindAction("Jump", throwIfNotFound: true);
        m_GroundMove_LookX = m_GroundMove.FindAction("LookX", throwIfNotFound: true);
        m_GroundMove_LookY = m_GroundMove.FindAction("LookY", throwIfNotFound: true);
        m_GroundMove_DriveMode = m_GroundMove.FindAction("DriveMode", throwIfNotFound: true);
        // CarMove
        m_CarMove = asset.FindActionMap("CarMove", throwIfNotFound: true);
        m_CarMove_Steer = m_CarMove.FindAction("Steer", throwIfNotFound: true);
        m_CarMove_Pedal = m_CarMove.FindAction("Pedal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GroundMove
    private readonly InputActionMap m_GroundMove;
    private List<IGroundMoveActions> m_GroundMoveActionsCallbackInterfaces = new List<IGroundMoveActions>();
    private readonly InputAction m_GroundMove_HoreMove;
    private readonly InputAction m_GroundMove_Jump;
    private readonly InputAction m_GroundMove_LookX;
    private readonly InputAction m_GroundMove_LookY;
    private readonly InputAction m_GroundMove_DriveMode;
    public struct GroundMoveActions
    {
        private @PlayerControles m_Wrapper;
        public GroundMoveActions(@PlayerControles wrapper) { m_Wrapper = wrapper; }
        public InputAction @HoreMove => m_Wrapper.m_GroundMove_HoreMove;
        public InputAction @Jump => m_Wrapper.m_GroundMove_Jump;
        public InputAction @LookX => m_Wrapper.m_GroundMove_LookX;
        public InputAction @LookY => m_Wrapper.m_GroundMove_LookY;
        public InputAction @DriveMode => m_Wrapper.m_GroundMove_DriveMode;
        public InputActionMap Get() { return m_Wrapper.m_GroundMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundMoveActions set) { return set.Get(); }
        public void AddCallbacks(IGroundMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_GroundMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GroundMoveActionsCallbackInterfaces.Add(instance);
            @HoreMove.started += instance.OnHoreMove;
            @HoreMove.performed += instance.OnHoreMove;
            @HoreMove.canceled += instance.OnHoreMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LookX.started += instance.OnLookX;
            @LookX.performed += instance.OnLookX;
            @LookX.canceled += instance.OnLookX;
            @LookY.started += instance.OnLookY;
            @LookY.performed += instance.OnLookY;
            @LookY.canceled += instance.OnLookY;
            @DriveMode.started += instance.OnDriveMode;
            @DriveMode.performed += instance.OnDriveMode;
            @DriveMode.canceled += instance.OnDriveMode;
        }

        private void UnregisterCallbacks(IGroundMoveActions instance)
        {
            @HoreMove.started -= instance.OnHoreMove;
            @HoreMove.performed -= instance.OnHoreMove;
            @HoreMove.canceled -= instance.OnHoreMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LookX.started -= instance.OnLookX;
            @LookX.performed -= instance.OnLookX;
            @LookX.canceled -= instance.OnLookX;
            @LookY.started -= instance.OnLookY;
            @LookY.performed -= instance.OnLookY;
            @LookY.canceled -= instance.OnLookY;
            @DriveMode.started -= instance.OnDriveMode;
            @DriveMode.performed -= instance.OnDriveMode;
            @DriveMode.canceled -= instance.OnDriveMode;
        }

        public void RemoveCallbacks(IGroundMoveActions instance)
        {
            if (m_Wrapper.m_GroundMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGroundMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_GroundMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GroundMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GroundMoveActions @GroundMove => new GroundMoveActions(this);

    // CarMove
    private readonly InputActionMap m_CarMove;
    private List<ICarMoveActions> m_CarMoveActionsCallbackInterfaces = new List<ICarMoveActions>();
    private readonly InputAction m_CarMove_Steer;
    private readonly InputAction m_CarMove_Pedal;
    public struct CarMoveActions
    {
        private @PlayerControles m_Wrapper;
        public CarMoveActions(@PlayerControles wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_CarMove_Steer;
        public InputAction @Pedal => m_Wrapper.m_CarMove_Pedal;
        public InputActionMap Get() { return m_Wrapper.m_CarMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarMoveActions set) { return set.Get(); }
        public void AddCallbacks(ICarMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_CarMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarMoveActionsCallbackInterfaces.Add(instance);
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Pedal.started += instance.OnPedal;
            @Pedal.performed += instance.OnPedal;
            @Pedal.canceled += instance.OnPedal;
        }

        private void UnregisterCallbacks(ICarMoveActions instance)
        {
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Pedal.started -= instance.OnPedal;
            @Pedal.performed -= instance.OnPedal;
            @Pedal.canceled -= instance.OnPedal;
        }

        public void RemoveCallbacks(ICarMoveActions instance)
        {
            if (m_Wrapper.m_CarMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_CarMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarMoveActions @CarMove => new CarMoveActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGroundMoveActions
    {
        void OnHoreMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLookX(InputAction.CallbackContext context);
        void OnLookY(InputAction.CallbackContext context);
        void OnDriveMode(InputAction.CallbackContext context);
    }
    public interface ICarMoveActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnPedal(InputAction.CallbackContext context);
    }
}
